// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package inject

import (
	"github.com/Goboolean/common/pkg/resolver"
	"github.com/Goboolean/fetch-system.IaC/internal/connect"
	"github.com/Goboolean/fetch-system.IaC/internal/etcd"
	"github.com/Goboolean/fetch-system.IaC/internal/kafka"
	"github.com/Goboolean/fetch-system.IaC/internal/kis"
	"github.com/Goboolean/fetch-system.IaC/internal/polygon"
	"github.com/Goboolean/fetch-system.IaC/internal/prepare"
	"github.com/Goboolean/fetch-system.IaC/internal/retrieve"
	"github.com/Goboolean/fetch-system.IaC/pkg/db"
	"os"
)

// Injectors from wire.go:

func InitializeKafkaConfigurator() (*kafka.Configurator, func(), error) {
	configMap := ProvideKafkaConfig()
	configurator, cleanup, err := ProvideKafkaConfigurator(configMap)
	if err != nil {
		return nil, nil, err
	}
	return configurator, func() {
		cleanup()
	}, nil
}

func InitializeKafkaProducer() (*kafka.Configurator, func(), error) {
	configMap := ProvideKafkaConfig()
	configurator, cleanup, err := ProvideKafkaProducer(configMap)
	if err != nil {
		return nil, nil, err
	}
	return configurator, func() {
		cleanup()
	}, nil
}

func InitializeETCDClient() (*etcd.Client, func(), error) {
	configMap := ProvideETCDConfig()
	client, cleanup, err := ProvideETCDClient(configMap)
	if err != nil {
		return nil, nil, err
	}
	return client, func() {
		cleanup()
	}, nil
}

func InitializePostgreSQLClient() (*db.Queries, func(), error) {
	configMap := ProvidePostgreSQLConfig()
	queries, cleanup, err := ProvidePostgreSQLClient(configMap)
	if err != nil {
		return nil, nil, err
	}
	return queries, func() {
		cleanup()
	}, nil
}

func InitializeKafkaConnectClient() (*connect.Client, func(), error) {
	configMap := ProvideKafkaConnectConfig()
	client, cleanup, err := ProvideKafkaConnectClient(configMap)
	if err != nil {
		return nil, nil, err
	}
	return client, func() {
		cleanup()
	}, nil
}

func InitializeKISReader() (*kis.Reader, error) {
	configMap := ProvideKISConfig()
	reader, err := ProvideKISReader(configMap)
	if err != nil {
		return nil, err
	}
	return reader, nil
}

func InitializePolygonClient() (*polygon.Client, error) {
	configMap := ProvidePolygonConfig()
	client, err := ProvidePolygonClient(configMap)
	if err != nil {
		return nil, err
	}
	return client, nil
}

func InitializePreparer() (*prepare.Manager, func(), error) {
	client, cleanup, err := InitializeETCDClient()
	if err != nil {
		return nil, nil, err
	}
	queries, cleanup2, err := InitializePostgreSQLClient()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	connectClient, cleanup3, err := InitializeKafkaConnectClient()
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	configurator, cleanup4, err := InitializeKafkaConfigurator()
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	manager := prepare.New(client, queries, connectClient, configurator)
	return manager, func() {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

func InitializeRetriever() (*retrieve.Manager, func(), error) {
	client, err := InitializePolygonClient()
	if err != nil {
		return nil, nil, err
	}
	queries, cleanup, err := InitializePostgreSQLClient()
	if err != nil {
		return nil, nil, err
	}
	reader, err := InitializeKISReader()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	manager := retrieve.New(client, queries, reader)
	return manager, func() {
		cleanup()
	}, nil
}

// wire.go:

func ProvideKafkaConfig() *resolver.ConfigMap {
	return &resolver.ConfigMap{
		"BOOTSTRAP_HOST": os.Getenv("KAFKA_BOOTSTRAP_HOST"),
	}
}

func ProvideETCDConfig() *resolver.ConfigMap {
	return &resolver.ConfigMap{
		"HOST": os.Getenv("ETCD_HOST"),
	}
}

func ProvidePostgreSQLConfig() *resolver.ConfigMap {
	return &resolver.ConfigMap{
		"HOST":     os.Getenv("POSTGRES_HOST"),
		"PORT":     os.Getenv("POSTGRES_PORT"),
		"USER":     os.Getenv("POSTGRES_USER"),
		"PASSWORD": os.Getenv("POSTGRES_PASSWORD"),
		"DATABASE": os.Getenv("POSTGRES_DATABASE"),
	}
}

func ProvideKafkaConnectConfig() *resolver.ConfigMap {
	return &resolver.ConfigMap{
		"HOST":                   os.Getenv("KAFKA_CONNECT_HOST"),
		"MONGODB_CONNECTION_URI": os.Getenv("MONGODB_CONNECTION_URI"),
		"MONGODB_DATABASE":       os.Getenv("MONGODB_DATABASE"),
	}
}

func ProvideKISConfig() *resolver.ConfigMap {
	return &resolver.ConfigMap{
		"APPKEY": os.Getenv("KIS_APPKEY"),
		"SECRET": os.Getenv("KIS_SECRET"),
	}
}

func ProvidePolygonConfig() *resolver.ConfigMap {
	return &resolver.ConfigMap{
		"SECRET_KEY": os.Getenv("POLYGON_SECRET_KEY"),
	}
}

func ProvideKafkaConfigurator(c *resolver.ConfigMap) (*kafka.Configurator, func(), error) {
	k, err := kafka.New(c)
	if err != nil {
		return nil, nil, err
	}

	return k, func() {
		k.Close()
	}, nil
}

func ProvideKafkaProducer(c *resolver.ConfigMap) (*kafka.Configurator, func(), error) {
	k, err := kafka.New(c)
	if err != nil {
		return nil, nil, err
	}

	return k, func() {
		k.Close()
	}, nil
}

func ProvideETCDClient(c *resolver.ConfigMap) (*etcd.Client, func(), error) {
	e, err := etcd.New(c)
	if err != nil {
		return nil, nil, err
	}

	return e, func() {
		e.Close()
	}, nil
}

func ProvidePostgreSQLClient(c *resolver.ConfigMap) (*db.Client, func(), error) {
	p, err := db.NewDB(c)
	if err != nil {
		return nil, nil, err
	}

	return p, func() {
		p.Close()
	}, nil
}

func ProvideKafkaConnectClient(c *resolver.ConfigMap) (*connect.Client, func(), error) {
	k, err := connect.New(c)
	if err != nil {
		return nil, nil, err
	}

	return k, func() {
		k.Close()
	}, nil
}

func ProvideKISReader(c *resolver.ConfigMap) (*kis.Reader, error) {
	return kis.New(c)
}

func ProvidePolygonClient(c *resolver.ConfigMap) (*polygon.Client, error) {
	return polygon.New(c)
}
